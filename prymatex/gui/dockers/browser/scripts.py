#!/usr/bin/env python
#-*- encoding: utf-8 -*-

from prymatex.qt import QtCore, QtGui

from prymatex.utils import encoding

#=======================================================================
# System runningContext wrapper
# wrap a runningContext for using in window context of javascript
#=======================================================================
class SystemWrapper(QtCore.QObject):
    def __init__(self, parent):
        QtCore.QObject.__init__(self, parent)
        self.context = None
        
    @QtCore.Slot(str)
    def write(self, data):
        pass

    @QtCore.Slot()
    def read(self):
        pass

    @QtCore.Slot()
    def close(self):
        pass

    def outputString(self):
        while self.context is None:
            QtGui.QApplication.processEvents()
        return self.context.outputValue
    outputString = QtCore.Property(str, outputString)

    def contextReady(self, context):
        print(context)
        self.context = context

#=======================================================================
# Custom JavaScript for using with pages generated by prymatex
#=======================================================================
WINDOW_JAVASCRIPT = """
%s
TextMate.system = function(command, callback) {
    this._system(command);
    if (callback != null) {}
    return _systemWrapper;
}
"""
    
class TextMate(QtCore.QObject):
    def __init__(self, parent, manager):
        QtCore.QObject.__init__(self, parent)
        self.manager = manager
        self.webView = parent
        self.busy = False
        
    @QtCore.Slot(str)
    def _system(self, command):
        self.busy = True
        systemWrapper = SystemWrapper(self)
        context = self.manager.runSystemCommand(
            shellCommand = command,
            environment = self.webView.environmentVariables(),
            asynchronous = True,
            callback = systemWrapper.contextReady
        )
        self.webView.page().mainFrame().addToJavaScriptWindowObject("_systemWrapper", 
            systemWrapper)
        self.busy = False

    def isBusy(self):
        return self.busy
    isBusy = QtCore.Property("bool", isBusy)